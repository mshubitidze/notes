import { type Note } from "@prisma/client";
import { type NextPage } from "next";
import Head from "next/head";
import React, { useState, useEffect } from "react";
// import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { api } from "../utils/api";

const Home: NextPage = () => {
  const createNoteMutation = api.notes.createNote.useMutation();
  const deleteNoteMutation = api.notes.deleteNoteById.useMutation();
  const updateActiveNoteMutation = api.notes.updateActiveById.useMutation();
  const [note, setNote] = useState<string>("");
  const [fetchedUserNotes, setFetchedUserNotes] = useState<Note[] | undefined>(
    []
  );

  const { data: sessionData } = useSession();

  const notes = api.notes.getAllNotes.useQuery();

  const userNotes = api.notes.getNotesByUser.useQuery(
    {
      userId: sessionData?.user.id || "",
    },
    { enabled: sessionData?.user !== undefined }
  );

  useEffect(() => {
    const sortedUserNotes = userNotes.data?.sort((a, b) =>
      new Date(a.createdAt) > new Date(b.createdAt) ? -1 : 1
    );
    setFetchedUserNotes(sortedUserNotes);
  }, [userNotes.data]);

  async function handleSubmitNewNote(e: React.FormEvent) {
    e.preventDefault();
    setNote("");
    await createNoteMutation.mutateAsync({
      note,
      userId: sessionData?.user.id || "",
    });
    await userNotes.refetch();
  }

  console.log(userNotes);

  async function handleNoteDelete(id: string) {
    await deleteNoteMutation.mutateAsync({
      id,
    });
    await userNotes.refetch();
  }

  async function handleNoteToggleActive(id: string, active: boolean) {
    await updateActiveNoteMutation.mutateAsync({
      id,
      active,
    });
    await userNotes.refetch();
  }

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center gap-10 bg-gradient-to-b from-[#2e026d] to-[#15162c] px-8 md:px-20 lg:px-44">
        {sessionData?.user.name && (
          <>
            <form
              className="flex flex-col gap-4 justify-center items-center w-full"
              onSubmit={handleSubmitNewNote}
            >
              <fieldset className="flex flex-col gap-1 w-full text-white">
                <label htmlFor="note-input">Type your note</label>
                <input
                  className="py-4 px-8 text-xl bg-blue-900 rounded-lg outline-none"
                  value={note}
                  onChange={(e) => setNote(e.currentTarget.value)}
                  type="text"
                  id="note-input"
                />
              </fieldset>

              <button
                disabled={!note}
                type="submit"
                className="py-3 px-6 w-1/3 text-white bg-fuchsia-500 rounded-lg disabled:bg-gray-400"
              >
                Submit
              </button>
            </form>

            <div className="flex flex-col gap-4 p-8 w-full rounded-lg border border-slate-500">
              <h1 className="text-4xl text-white">Notes</h1>
              <ul className="flex flex-col text-white">
                {fetchedUserNotes?.map((note) => (
                  <div
                    className="flex flex-row gap-2 justify-between items-center border border-transparent border-b-slate-500 first:border-t-slate-500"
                    key={note.id}
                  >
                    <div className="flex flex-row gap-4 items-center self-start p-4 w-full">
                      {note.active ? (
                        <button
                          onClick={() =>
                            handleNoteToggleActive(note.id, note.active)
                          }
                          type="button"
                          id={`button-${note.id}`}
                          className="rounded-full border border-green-500 min-h-[2.5rem] min-w-[2.5rem]"
                        ></button>
                      ) : (
                        <button
                          onClick={() =>
                            handleNoteToggleActive(note.id, note.active)
                          }
                          type="button"
                          id={`button-${note.id}`}
                          className="flex justify-center items-center rounded-full border min-h-[2.5rem] min-w-[2.5rem] border-slate-500"
                        >
                          <div className="rounded-full min-h-[2rem] min-w-[2rem] bg-slate-500"></div>
                        </button>
                      )}
                      <div className="text-xl">
                        {note.active ? (
                          <p className="">{note.note}</p>
                        ) : (
                          <p className="line-through text-slate-500">
                            {note.note}
                          </p>
                        )}
                      </div>
                    </div>
                    <button
                      onClick={() => handleNoteDelete(note.id)}
                      type="button"
                      className="rounded-lg min-h-[2rem] min-w-[2rem]"
                    >
                      <p className="text-2xl">‚ùå</p>
                    </button>
                  </div>
                ))}
              </ul>
            </div>
          </>
        )}
        <AuthShowcase />
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  return (
    <div className="flex flex-col gap-4 justify-center items-center">
      <p className="text-2xl text-center text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
      </p>
      <button
        className="py-3 px-10 font-semibold text-white no-underline rounded-full transition bg-white/10 hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
