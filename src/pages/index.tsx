import { type Note } from "@prisma/client";
import { type NextPage } from "next";
import Head from "next/head";
import React, { useState, useEffect } from "react";
// import Link from "next/link";
// import { signIn, signOut, useSession } from "next-auth/react";

import { api } from "../utils/api";

const Home: NextPage = () => {
  const createNoteMutation = api.notes.createNote.useMutation();
  const deleteNoteMutation = api.notes.deleteNoteById.useMutation();
  const updateActiveNoteMutation = api.notes.updateActiveById.useMutation();
  const [note, setNote] = useState<string>("");
  const [fetchedNotes, setFetchedNotes] = useState<Note[] | undefined>([]);

  const notes = api.notes.getAllNotes.useQuery();

  useEffect(() => {
    const sortedNotesData = notes.data?.sort((a, b) =>
      new Date(a.createdAt) > new Date(b.createdAt) ? -1 : 1
    );
    setFetchedNotes(sortedNotesData);
  }, [notes.data]);

  const handleSubmitNewNote = async (e: React.FormEvent) => {
    e.preventDefault();
    setNote("");
    await createNoteMutation.mutateAsync({
      note,
    });
    await notes.refetch();
  };

  const handleNoteDelete = async (id: string, e: React.MouseEvent) => {
    e.preventDefault();
    await deleteNoteMutation.mutateAsync({
      id,
    });
    await notes.refetch();
  };

  const handleNoteToggleActive = async (id: string, active: boolean) => {
    await updateActiveNoteMutation.mutateAsync({
      id,
      active,
    });
    await notes.refetch();
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <form
          className="flex flex-col gap-4 w-1/3"
          onSubmit={handleSubmitNewNote}
        >
          <fieldset className="flex flex-col gap-1 text-white">
            <label htmlFor="note-input">Type your note</label>
            <input
              className="py-4 px-8 text-xl bg-blue-900 rounded-lg outline-none"
              value={note}
              onChange={(e) => setNote(e.currentTarget.value)}
              type="text"
              id="note-input"
            />
          </fieldset>

          <button
            disabled={!note}
            type="submit"
            className="py-3 px-6 text-white bg-fuchsia-500 rounded-lg disabled:bg-gray-400"
          >
            Submit
          </button>
        </form>

        <h1 className="pb-4 mt-12 text-4xl text-white">Notes</h1>
        <ul className="flex flex-col gap-2 w-1/3 text-white">
          {fetchedNotes?.map((note) => (
            <div
              className="flex flex-row gap-2 justify-between items-center"
              key={note.id}
            >
              {note.active ? (
                <li className="text-4xl">{note.note}</li>
              ) : (
                <li className="text-4xl line-through text-slate-600">
                  {note.note}
                </li>
              )}
              <div className="flex flex-row gap-2">
                {note.active ? (
                  <button
                    onClick={() => handleNoteToggleActive(note.id, note.active)}
                    type="button"
                    className="py-3 px-6 text-black bg-green-400 rounded-lg"
                  >
                    Complete
                  </button>
                ) : (
                  <button
                    onClick={() => handleNoteToggleActive(note.id, note.active)}
                    type="button"
                    className="py-3 px-6 text-black rounded-lg bg-slate-600"
                  >
                    Completed
                  </button>
                )}
                <button
                  onClick={(e) => handleNoteDelete(note.id, e)}
                  type="button"
                  className="py-3 px-6 text-black bg-red-600 rounded-lg"
                >
                  x
                </button>
              </div>
            </div>
          ))}
        </ul>
      </main>
    </>
  );
};

export default Home;

// const AuthShowcase: React.FC = () => {
//   const { data: sessionData } = useSession();

//   const { data: secretMessage } = api.example.getSecretMessage.useQuery(
//     undefined, // no input
//     { enabled: sessionData?.user !== undefined },
//   );

//   return (
//     <div className="flex flex-col gap-4 justify-center items-center">
//       <p className="text-2xl text-center text-white">
//         {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
//         {secretMessage && <span> - {secretMessage}</span>}
//       </p>
//       <button
//         className="py-3 px-10 font-semibold text-white no-underline rounded-full transition bg-white/10 hover:bg-white/20"
//         onClick={sessionData ? () => void signOut() : () => void signIn()}
//       >
//         {sessionData ? "Sign out" : "Sign in"}
//       </button>
//     </div>
//   );
// };
